# syntax=docker/dockerfile:1.4
# Dockerfile ultra-professionnel pour Quantum Retro-Causal Engine
# Techniques avanc√©es: multi-stage, layer caching, security hardening, distroless

# ===== ARGUMENTS GLOBAUX =====
ARG PYTHON_VERSION=3.11
ARG PYTHON_IMAGE=python:${PYTHON_VERSION}-slim
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILDKIT_INLINE_CACHE=1

# Build arguments pour flexibilit√©
ARG BUILD_ENV=production
ARG ENABLE_CPP=true
ARG ENABLE_PROFILING=false
ARG TARGET_ARCH=x86_64

# ===== STAGE: Base Dependencies =====
FROM ${PYTHON_IMAGE} as base-deps

# Metadata labels selon les standards OCI
LABEL org.opencontainers.image.title="Quantum Retro-Causal Engine"
LABEL org.opencontainers.image.description="AI-powered quantum trading engine with C++ optimization"
LABEL org.opencontainers.image.vendor="Quantum Technologies"
LABEL org.opencontainers.image.authors="Quantum Dev Team"
LABEL org.opencontainers.image.source="https://github.com/quantum-engine"
LABEL org.opencontainers.image.documentation="https://docs.quantum-engine.io"
LABEL org.opencontainers.image.version="2.0.0"

# Configuration apt avanc√©e
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
rm -rf /var/lib/apt/lists/*
apt-get clean
EOF

# Installation de tini pour proper signal handling
ADD https://github.com/krallin/tini/releases/download/v0.19.0/tini /tini
RUN chmod +x /tini

# ===== STAGE: Build Tools =====
FROM base-deps as build-tools

ARG ENABLE_CPP
ARG TARGET_ARCH

# Installation s√©lective des outils de build
RUN <<EOF
apt-get update
if [ "$ENABLE_CPP" = "true" ]; then
    apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        ninja-build \
        ccache \
        libomp-dev \
        pkg-config \
        git \
        libpython${PYTHON_VERSION}-dev
fi
# Outils de build Python toujours n√©cessaires
apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    python3-dev
rm -rf /var/lib/apt/lists/*
apt-get clean
EOF

# Configuration ccache pour acc√©l√©rer les rebuilds
ENV CCACHE_DIR=/opt/ccache
ENV PATH="/usr/lib/ccache:$PATH"
RUN mkdir -p /opt/ccache && chmod 777 /opt/ccache

# ===== STAGE: Python Dependencies =====
FROM build-tools as python-deps

# Configuration pip optimis√©e
ENV PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_ROOT_USER_ACTION=ignore \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# Copie des fichiers requirements avec cache mount
COPY requirements.txt requirements-dev.txt ./

# Installation avec mount cache pour pip
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/opt/ccache \
    pip install --upgrade pip setuptools wheel && \
    pip install --no-deps -r requirements.txt

# Installation conditionnelle des d√©pendances de d√©veloppement
ARG BUILD_ENV
RUN --mount=type=cache,target=/root/.cache/pip \
    if [ "$BUILD_ENV" = "development" ]; then \
        pip install --no-deps -r requirements-dev.txt; \
    fi

# Installation pybind11 si C++ activ√©
ARG ENABLE_CPP
RUN --mount=type=cache,target=/root/.cache/pip \
    if [ "$ENABLE_CPP" = "true" ]; then \
        pip install pybind11[global] numpy; \
    fi

# ===== STAGE: C++ Module Builder =====
FROM python-deps as cpp-builder

ARG ENABLE_CPP
ARG TARGET_ARCH
ARG BUILD_ENV

# Skip this stage if C++ disabled
RUN if [ "$ENABLE_CPP" != "true" ]; then exit 0; fi

WORKDIR /app

# Copie s√©lective pour optimiser le cache
COPY cpp/CMakeLists.txt cpp/
COPY cpp/*.cpp cpp/
COPY cpp/*.hpp cpp/ 2>/dev/null || true

# Configuration CMake avanc√©e avec cache
RUN --mount=type=cache,target=/opt/ccache \
    --mount=type=cache,target=/app/cpp/build \
    if [ "$ENABLE_CPP" = "true" ]; then \
        cd cpp && \
        mkdir -p build && \
        cd build && \
        cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -DNDEBUG -march=native -mtune=native -flto=auto -ffast-math" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && \
        ninja -j$(nproc) && \
        # Test de base du module
        python3 -c "import sys; sys.path.insert(0, '.'); import quantum_selector; print('‚úÖ C++ module OK')" || \
        (echo "‚ùå C++ module test failed" && exit 1); \
    fi

# ===== STAGE: Code Quality & Security Scan =====
FROM python-deps as code-quality

ARG BUILD_ENV
ARG ENABLE_PROFILING

# Installation des outils de qualit√© seulement si n√©cessaire
RUN --mount=type=cache,target=/root/.cache/pip \
    if [ "$BUILD_ENV" = "development" ] || [ "$ENABLE_PROFILING" = "true" ]; then \
        pip install \
            bandit \
            safety \
            mypy \
            black \
            isort \
            flake8; \
    fi

WORKDIR /app
COPY src/ src/
COPY pyproject.toml setup.py 2>/dev/null ./

# Analyse de s√©curit√© et qualit√©
RUN if [ "$BUILD_ENV" = "development" ]; then \
        echo "üîç Security scan..." && \
        bandit -r src/ -f json -o /tmp/bandit-report.json || true && \
        echo "üîç Dependency security check..." && \
        safety check --json --output /tmp/safety-report.json || true && \
        echo "‚úÖ Quality checks completed"; \
    fi

# ===== STAGE: Application Builder =====
FROM python-deps as app-builder

WORKDIR /app

# Copie des sources avec .dockerignore optimis√©
COPY --chown=1001:1001 . .

# Copie du module C++ compil√©
COPY --from=cpp-builder /app/cpp/build/*.so ./cpp/build/ 2>/dev/null || true
COPY --from=cpp-builder /app/cpp/build/*.pyd ./cpp/build/ 2>/dev/null || true

# Installation du package en mode optimis√©
ARG BUILD_ENV
RUN if [ "$BUILD_ENV" = "production" ]; then \
        pip install --no-deps -e .; \
    else \
        pip install -e .; \
    fi

# Cr√©ation de la structure pour le module C++
RUN mkdir -p src/quantum_engine/native/cpp/build && \
    if [ -f cpp/build/quantum_selector.so ]; then \
        cp cpp/build/quantum_selector*.so src/quantum_engine/native/cpp/build/ || true; \
    fi

# ===== STAGE: Runtime Base =====
FROM ${PYTHON_IMAGE} as runtime-base

# Installation des runtime libraries minimales
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends \
    libomp5 \
    libgomp1 \
    curl \
    netcat-traditional \
    procps
rm -rf /var/lib/apt/lists/*
apt-get clean
EOF

# Cr√©ation utilisateur non-root avec UID/GID fixes
RUN groupadd --gid 1001 quantum && \
    useradd --uid 1001 --gid quantum --shell /bin/bash --create-home quantum

# Configuration des dossiers avec permissions appropri√©es
RUN mkdir -p \
    /app/{logs,checkpoints,backups,monitoring/data} \
    /opt/quantum \
    /var/log/quantum && \
    chown -R quantum:quantum \
    /app \
    /opt/quantum \
    /var/log/quantum

# ===== STAGE: Production Runtime =====
FROM runtime-base as production

# Copie de tini
COPY --from=base-deps /tini /tini

# Copie des d√©pendances Python
COPY --from=python-deps /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

# Copie de l'application
COPY --from=app-builder --chown=quantum:quantum /app /app

# Configuration des variables d'environnement
ENV PYTHONPATH=/app \
    QUANTUM_ENV=production \
    QUANTUM_USER=quantum \
    QUANTUM_UID=1001 \
    QUANTUM_GID=1001 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONOPTIMIZE=2 \
    PIP_NO_CACHE_DIR=1 \
    QUANTUM_CPP_ENABLED=1 \
    OMP_NUM_THREADS=4 \
    OMP_WAIT_POLICY=passive \
    OMP_PROC_BIND=true

# Configuration de l'utilisateur et permissions finales
USER quantum
WORKDIR /app

# Test final de l'installation
RUN python3 -c "
import sys
print(f'üêç Python: {sys.version}')

try:
    from src.quantum_engine.core.state import QuantumState
    print('‚úÖ Core modules imported successfully')
except Exception as e:
    print(f'‚ùå Core import error: {e}')
    sys.exit(1)

# Test module C++ si disponible
try:
    sys.path.insert(0, 'src/quantum_engine/native/cpp/build')
    import quantum_selector
    print('‚úÖ C++ acceleration available')
except ImportError:
    print('‚ö†Ô∏è C++ acceleration not available (fallback to Python)')

print('üöÄ Quantum Engine ready for production!')
"

# Ports expos√©s
EXPOSE 8000 9090

# Health check optimis√©
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Entrypoint avec tini pour proper signal handling
ENTRYPOINT ["/tini", "--", "/app/docker/entrypoint.sh"]
CMD ["uvicorn", "src.quantum_engine.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# ===== STAGE: Development Runtime =====
FROM runtime-base as development

# Installation d'outils de d√©veloppement
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends \
    vim \
    git \
    htop \
    tree \
    strace \
    tcpdump \
    iputils-ping
rm -rf /var/lib/apt/lists/*
EOF

# Copie des d√©pendances (incluant dev)
COPY --from=python-deps /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

# Copie de l'application
COPY --from=app-builder --chown=quantum:quantum /app /app

# Variables d'environnement pour d√©veloppement
ENV QUANTUM_ENV=development \
    DEBUG=true \
    PYTHONDONTWRITEBYTECODE=0 \
    PYTHONOPTIMIZE=0 \
    RELOAD_ON_CHANGE=true

USER quantum
WORKDIR /app

# Hot-reload par d√©faut en d√©veloppement
CMD ["uvicorn", "src.quantum_engine.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ===== STAGE: Distroless Production (Ultra-S√©curis√©) =====
FROM gcr.io/distroless/python3-debian11 as distroless

# Copie des d√©pendances et de l'app depuis production
COPY --from=production /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=production --chown=1001:1001 /app /app

# Variables d'environnement minimales
ENV PYTHONPATH=/app \
    QUANTUM_ENV=production \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

USER 1001
WORKDIR /app

EXPOSE 8000
ENTRYPOINT ["python3", "-m", "uvicorn", "src.quantum_engine.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

# ===== STAGE: Debug/Profiling =====
FROM production as debug

USER root

# Installation d'outils de profiling
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends \
    gdb \
    valgrind \
    strace \
    perf-tools-unstable \
    linux-perf
rm -rf /var/lib/apt/lists/*
EOF

# Installation d'outils Python de profiling
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install \
        py-spy \
        memory-profiler \
        line-profiler \
        pyflame \
        viztracer

USER quantum

ENV QUANTUM_PROFILING_ENABLED=true
CMD ["py-spy", "top", "--pid", "1"]